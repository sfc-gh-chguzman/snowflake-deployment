trigger:
  branches:
    include:
      - main
      - qa
  paths:
    include:
      - schemachange

variables:
  - name: pipDownloadDir
    value: $(Pipeline.Workspace)/.pip
  # Use 'Production-Vars' only if the branch is 'main'.
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      - group: 'Production-Vars'
  # Otherwise, if the branch is 'qa', use 'QA-Vars'.
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'qa') }}:
      - group: 'QA-Vars'
  # For any other branch that is not 'main' or 'qa', use 'Dev-Vars'.
  - ${{ else }}:
      - group: 'dbt-dev'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # Set our pipelines to use Python 3.11
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  # Check out the repository to the current working folder
  - checkout: self

  # Attempt to restore our pip cache folder
  # If the OS version or the contents of our requirements file changes, the cache will be skipped
  - task: Cache@2
    displayName: Load cache
    inputs:
      key: 'pip | "$(Agent.OS)" | requirements.txt'
      path: $(pipDownloadDir)
      cacheHitVar: cacheRestored

  # If we are unable to load a cached copy, download to our cache folder from repos
  - script: pip download -r requirements.txt --dest=$(pipDownloadDir)
    displayName: "Download requirements"
    condition: eq(variables.cacheRestored, 'false')

  # pip install from our cache folder
  - script: pip install -r requirements.txt --no-index --find-links=$(pipDownloadDir)
    displayName: "Install requirements"

  # if using secure file with rsakey
  #- task: DownloadSecureFile@1
  #  name: rsa_key
  #  displayName: 'Download Snowflake RSA key'
  #  inputs:
  #    secureFile: 'rsa_key.p8'

  # Execute our Snowflake CLI commands
  - task: Bash@3
    displayName: 'Run schemachange'
    env:
      SNOWFLAKE_ACCOUNT: $(SNOWFLAKE_ACCOUNT)
      SNOWFLAKE_USER: $(SNOWFLAKE_USER)
      SNOWFLAKE_ROLE: $(SNOWFLAKE_ROLE)
      SNOWFLAKE_WAREHOUSE: $(SNOWFLAKE_WAREHOUSE)
      SNOWFLAKE_DATABASE: $(SNOWFLAKE_DATABASE)
      SNOWFLAKE_SCHEMA: $(SNOWFLAKE_SCHEMA)
      SNOWFLAKE_PASSWORD: $(DBT_ENV_SECRET_PASSWORD)
    inputs:
      # workingDirectory: resource-optimization
      targetType: 'inline'
      script: | 
        set -e
        snow connection add -n default --no-interactive --authenticator SNOWFLAKE_JWT
        snow connection test 
        snow schemachange
